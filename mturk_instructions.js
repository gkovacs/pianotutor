// Generated by CoffeeScript 1.6.3
(function() {
  var acceptHIT, checkCode, checkIfHITDoneCookies, codeKeypress, documentReady, getCookieValue, getUrlParameters, getWorkerId, insertScript, isChrome, isComboBoxZero, isRadioEmpty, isTextEmpty, nextYearDateString, pleaseAnswer, previewHIT, root, setCookieValue, setCookieValueIfNotSet, taskAcceptedByWorker, testPlayNote, toHitCode, validateForm;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.taskname = '${taskname}';

  if (root.taskname.indexOf('taskname') !== -1) {
    root.taskname = 'foobarrr';
  }

  getUrlParameters = root.getUrlParameters = function() {
    var map, parts;
    map = {};
    parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m, key, value) {
      return map[key] = decodeURI(value);
    });
    return map;
  };

  getWorkerId = root.getWorkerId = function() {
    var params;
    params = getUrlParameters();
    if (params.workerId != null) {
      return params.workerId;
    }
    return '';
  };

  insertScript = root.insertScript = function(url) {
    var scriptTag;
    scriptTag = document.createElement('script');
    scriptTag.type = 'text/javascript';
    scriptTag.src = url;
    return document.documentElement.appendChild(scriptTag);
  };

  nextYearDateString = function() {
    var nextyear;
    nextyear = new Date();
    nextyear.setFullYear(nextyear.getFullYear() + 1);
    return nextyear.toGMTString();
  };

  taskAcceptedByWorker = root.taskAcceptedByWorker = function(accepted_taskname) {
    if (accepted_taskname === '' || accepted_taskname === root.taskname) {
      console.log('taskname matches: ' + accepted_taskname);
      setCookieValueIfNotSet('taskname', root.taskname);
      return setCookieValueIfNotSet('expires', nextYearDateString());
    } else {
      console.log('taskname mismatch: ' + accepted_taskname + ' vs ' + root.taskname);
      document.getElementById('returnwarning').style.display = '';
      setCookieValueIfNotSet('taskname', accepted_taskname);
      return setCookieValueIfNotSet('expires', nextYearDateString());
    }
  };

  acceptHIT = root.acceptHIT = function() {
    console.log('hit accepted');
    return insertScript('//pianotutor.herokuapp.com/taskAcceptedByWorker.js?callback=taskAcceptedByWorker&workerid=' + encodeURI(getWorkerId()) + '&taskname=' + encodeURI(root.taskname));
  };

  toHitCode = root.toHitCode = function(taskname) {
    var char, hash, i, _i, _ref;
    hash = 0;
    if (taskname.length === 0) {
      return hash;
    }
    for (i = _i = 0, _ref = taskname.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      char = taskname.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash |= 0;
    }
    if (hash < 0) {
      return Math.floor(-hash / 4096);
    }
    return Math.floor(hash / 4096);
  };

  root.testPlayNote = testPlayNote = function() {
    var audioTag;
    console.log('note played!');
    audioTag = document.getElementById('testNote');
    audioTag.pause();
    audioTag.currentTime = 0.0;
    return audioTag.play();
  };

  root.codeKeypress = codeKeypress = function(event) {
    if (event.keyCode === 13) {
      checkCode();
      event.preventDefault();
      return false;
    } else {
      document.getElementById('codeCorrect').style.display = 'none';
      document.getElementById('codeIncorrect').style.display = 'none';
      return true;
    }
  };

  root.checkCode = checkCode = function() {
    var expected_hitcode, hitcode, submitButton;
    expected_hitcode = toHitCode(root.taskname).toString();
    hitcode = document.getElementById('hitcode').value.trim();
    if (hitcode !== expected_hitcode) {
      document.getElementById('codeCorrect').style.display = 'none';
      return document.getElementById('codeIncorrect').style.display = '';
    } else {
      document.getElementById('codeCorrect').style.display = '';
      document.getElementById('codeIncorrect').style.display = 'none';
      document.getElementById('checkCodeButton').disabled = true;
      document.getElementById('hitcode').disabled = true;
      document.getElementById('survey').style.display = '';
      submitButton = document.getElementById('submitButton');
      if (submitButton != null) {
        return submitButton.style.display = '';
      }
    }
  };

  isComboBoxZero = root.isComboBoxZero = function(name) {
    return document.getElementsByName(name)[0].value === '0';
  };

  isTextEmpty = root.isTextEmpty = function(name) {
    return document.getElementsByName(name)[0].value === '';
  };

  isRadioEmpty = root.isRadioEmpty = function(name) {
    var checked, x, _i, _len, _ref;
    checked = false;
    _ref = document.getElementsByName(name);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      if (x.checked) {
        checked = true;
      }
    }
    return !checked;
  };

  pleaseAnswer = function(name) {
    return alert('please answer survey question ' + name);
  };

  root.validateForm = validateForm = function() {
    var expected_hitcode, hitcode;
    expected_hitcode = toHitCode(root.taskname).toString();
    hitcode = document.getElementById('hitcode').value.trim();
    if (hitcode !== expected_hitcode) {
      alert('the code you input: "' + hitcode + '" is not correct');
      return false;
    }
    if (!isChrome()) {
      alert('You must use Google Chrome to do this task');
      return false;
    }
    if (isComboBoxZero('musicexperience')) {
      pleaseAnswer(3);
      return false;
    }
    if (isComboBoxZero('musicrecency')) {
      pleaseAnswer(4);
      return false;
    }
    if (isComboBoxZero('pianoexperience')) {
      pleaseAnswer(5);
      return false;
    }
    if (isComboBoxZero('pianorecency')) {
      pleaseAnswer(6);
      return false;
    }
    if (isRadioEmpty('piece1heard')) {
      pleaseAnswer(7);
      return false;
    }
    if (isRadioEmpty('piece1played')) {
      pleaseAnswer(7);
      return false;
    }
    if (isRadioEmpty('piece2heard')) {
      pleaseAnswer(7);
      return false;
    }
    if (isRadioEmpty('piece2played')) {
      pleaseAnswer(7);
      return false;
    }
    return true;
  };

  isChrome = function() {
    return /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
  };

  setCookieValue = root.setCookieValue = function(targetKey, targetValue) {
    var existing_keys, haveSetKey, keyval, parts, _i, _len, _ref;
    existing_keys = [];
    haveSetKey = false;
    if (document.cookie != null) {
      _ref = document.cookie.split(';');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        keyval = _ref[_i];
        parts = keyval.split('=');
        if (parts[0] && parts[0] === targetKey) {
          existing_keys.push(targetKey + '=' + targetValue);
          haveSetKey = true;
        } else {
          existing_keys.push(keyval);
        }
      }
    }
    if (!haveSetKey) {
      existing_keys.push(targetKey + '=' + targetValue);
    }
    return document.cookie = existing_keys.join(';');
  };

  setCookieValueIfNotSet = root.setCookieValueIfNotSet = function(targetKey, targetValue) {
    var existingCookieVal;
    existingCookieVal = getCookieValue(targetKey);
    if (existingCookieVal == null) {
      return setCookieValue(targetKey, targetValue);
    }
  };

  getCookieValue = root.getCookieValue = function(targetKey) {
    var key, keyval, part, parts, val, _i, _len;
    if (document.cookie != null) {
      parts = document.cookie.split(';');
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        keyval = part.split('=');
        key = keyval[0];
        if ((key != null) && key.trim() === targetKey) {
          val = keyval[1];
          if (val != null) {
            return val;
          }
        }
      }
    }
    return null;
  };

  previewHIT = root.previewHIT = function() {
    var acceptedTask;
    acceptedTask = getCookieValue('taskname');
    if ((acceptedTask != null) && acceptedTask !== '' && acceptedTask !== root.taskname) {
      return document.getElementById('dontacceptwarning').style.display = '';
    }
  };

  checkIfHITDoneCookies = root.checkIfHITDoneCookies = function() {
    var acceptedTask;
    acceptedTask = getCookieValue('taskname');
    if ((acceptedTask != null) && acceptedTask !== '' && acceptedTask !== root.taskname) {
      return document.getElementById('returnwarning').style.display = '';
    }
  };

  documentReady = function() {
    var startTask, submitButton, workerid;
    submitButton = document.getElementById('submitButton');
    if (submitButton != null) {
      submitButton.onclick = 'return validateForm()';
    }
    if (!isChrome()) {
      document.getElementById('chromewarning').style.display = '';
      if (submitButton != null) {
        submitButton.disabled = true;
      }
      startTask = document.getElementById('startTask');
      if (startTask.text != null) {
        startTask.text = 'You must use Google Chrome to do this task. Open this HIT in Google Chrome to do the task.';
      }
      if (startTask.textContent != null) {
        startTask.textContent = 'You must use Google Chrome to do this task. Open this HIT in Google Chrome to do the task.';
      }
      startTask.href = 'http://www.google.com/chrome';
      document.getElementById('checkCodeButton').disabled = true;
      return document.getElementById('hitcode').disabled = true;
    } else {
      startTask = document.getElementById('startTask');
      startTask.href = '//pianotutor.herokuapp.com/mturk_index_' + root.taskname + '.html';
      workerid = getWorkerId();
      if (workerid !== '') {
        startTask.href = '//pianotutor.herokuapp.com/mturk_index_' + root.taskname + '.html?workerId=' + encodeURI(workerid);
        checkIfHITDoneCookies();
        return acceptHIT();
      } else {
        return previewHIT();
      }
    }
  };

  document.onreadystatechange = function() {
    if (document.readyState === 'complete') {
      return documentReady();
    }
  };

}).call(this);
